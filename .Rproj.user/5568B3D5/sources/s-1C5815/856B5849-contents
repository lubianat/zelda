library(data.table); library(dplyr)
tb.degs <- fread("data/singapore_rna_degs.csv") 
alz.degs <- read_excel("../Bridged\ networks/data/srep12393-s2 (1).xls", sheet =1 )
# library(XLConnect)
# 
# receptor.ligand.workbook <- loadWorkbook("../Bridged\ networks/data/ncomms8866-s3-SupplementaryData2.xlsx")

library(readxl)

ligrep <- read_excel("../Bridged\ networks/data/ncomms8866-s3-SupplementaryData2.xlsx", sheet =2 )

alz.up <- filter(alz.degs, maxFC > 2)
rm(alz.degs)
tb.up <- filter(tb.degs, logFC > 1)
rm(tb.degs)

#assign up to degs
alz.degs <- alz.up
tb.degs <- tb.up

#find upregulated proteins in immune system that might function as ligands
tb.degs.ligands <- tb.degs %>% filter(gene_name %in% ligrep$Ligand.ApprovedSymbol)

#find upregulated proteins in SNC that might function as receptors
alz.degs.receptors <- alz.degs %>% filter( Symbol %in% ligrep$Receptor.ApprovedSymbol)


#define which ligands can bind to these receptors
alz.degs.receptors.ligands <- ligrep %>% filter(Receptor.ApprovedSymbol %in% alz.degs.receptors$Symbol)

#filter which of these ligands are upregulated in the immune system data set
tb.mono.to.alz.brain.degs <- tb.degs.ligands %>% filter( gene_name %in% alz.degs.receptors.ligands$Ligand.ApprovedSymbol)

#select bridges for the specific dataset
immune.central.bridge <- ligrep %>% filter(Ligand.ApprovedSymbol %in% tb.mono.to.alz.brain.degs$gene_name &
                                          Receptor.ApprovedSymbol %in% alz.degs.receptors$Symbol
     )

#turn the edge list connecting upregulated immune ligands
# to upregulated SNC receptors into a graph
library(igraph)

#generate an edge list
immune.central.matrix <- as.matrix(
                        immune.central.bridge[,c("Ligand.ApprovedSymbol", 
                        "Receptor.ApprovedSymbol")])
edgeList <- data.frame(immune.central.matrix)
edgeList[] <- lapply(edgeList,as.character)



#create a bipartite igraph
library(igraph)
library(reshape2)

g <- graph.data.frame(edgeList, directed = F)
V(g)$type <- V(g)$name %in% edgeList[,2] 
plot(g, edge.color="gray30",edge.width=E(g)$weight, layout=layout_as_bipartite)

layout_as_bipartite(g)

# plot the graph with ggnetwork
library(ggnetwork); library(ggplot2);library(intergraph);

n <- (ggnetwork(g,layout = layout_as_bipartite(g)))
n$subgroup <- ifelse(n$y==1, "up in TB", "up in Alzheimer's" )
n$y <- ifelse(n$y==1, 0.8, 0.2)
n$yend <- ifelse(n$yend==1, 0.8, 0.2)
p <- ggplot(n, aes(x = x, y = y, xend = xend, yend = yend)) +
  geom_edges(color = "black") +
  geom_nodes(aes(color = subgroup), size = 20) +
  scale_colour_brewer(palette="Set2") +
  ylim(0,1) +
  labs(color = "Cell Population")+
  geom_nodetext(aes(label = vertex.names))+
  theme_blank()

plot(p)



# change specifics to the dataset

ps <- p + scale_colour_brewer(palette="Set2",
          labels=c("TB monocytes", 
                   "ALZ brain")
)

plot(ps)

library(GGally); library(network);library(sna);library(ggplot2)
ggsave("TB_alz.pdf",p, device = "pdf", width = 10, height = 5)
ggsave("TB_alz.png",p, device = "png", width = 10, height = 5)
# discontinued GGally part
# #turn igraph into network object
# net <-  asNetwork(g)
# 
# net <- network(g, bipartite = T)
# 
# #split the immune and SNC greoups
# net %v% "subgroup" = ifelse(c(unique(edgeList[,1]), 
#                               unique(edgeList[,2])) %in% unique(edgeList[,1]), 
#                             "immune", "SNC")
# 
# #add colors to network
# library(RColorBrewer)
# ggnet2(net, mode = "circle",
#             shape = 16,
#             color = "subgroup",
#             color.legend = "Cell Population",
#             palette = "Set2", 
#             size = 20,
#             label = TRUE,
#             label.size = 4,
#             label.alpha = 0.9)
#             
#               
